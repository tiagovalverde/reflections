When would you want to create a remote repository rather than keeping all your work local?

  I would want to create a remote repository to be able to work with other people on the same project. This way everyone have always the latest version of the project. Having the code in a remote repository makes it more flexible to be accessed. Also, it can be used as a measure of backing up our work.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	By pulling the changes manually from github we get to see which commits were made after my last commit. If the pulls were made automatically I would not have control of my local repository.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
	A fork is a copy of someone else's repository on Github. A fork is used when you want to use a repository with a different purpose. For example to add your own feature or to simply perform some test on the repository.
	A clone is a copy of the repository. A clone can be done localy, on the same machine, or can be done from a online repository such as Github. A clone is used extensively in collaboration.
	Branches are the different paths your repository can cross. Usually the master branch is used and the commits are linear. For refractoring, documentation or simple moditications there is no need to create new branches. However, it is a good ideat to create a new branch if a bug is found of a new feature has to be implmented and tested witouth breaking the entire project. When the feature is created and properly tested and a bug is solved the brnaches can be merged.

What is the benefit of having a copy of the last known state of the remote stored locally?
	The benefit of having a copy of the last known state of the remote in the local repository is the fact that we can check the status of the branch and wee can compare local files with remote files with git diff. This way makes it easier to resolve conflicts and merge files.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
	Withouth Git or Github I would be commeting a lot more in the code so other collaborators could read the reasons I made some changes. It would be really hard to keep a history of the changes of the project through the development process. We would easily loose track of what changes were made and who made the changes. Also, everytime there is a conflict happening, witouth git we would not know who was responsible for the changes and who has to fix the conflict. 

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
	Working on a different brnach allows for the master branch to be always in a working state, not with conflicts and all the features working. Moreover, with the Pull Request functionality that Github provides, it is possible to shate a different branch that was developed to others collaborators so they could approve the changes to the master change or provide some feedback if conflicts found. Working on separate branches and ececuting pull requests is benefetial to work in collaboration.

